---
import RelatedArticle from "./RelatedArticle.astro";
import { getBlogs } from "../library/microcms";

interface Props {
  category: string;
}

// microCMS呼び出し
const { category } = Astro.props;
const response = await getBlogs({
  fields: ["id", "title", "thumbnail", "category", "publishedAt"],
});

response.contents.map((e) => console.log(e.category));
console.log(category);

// 記事のフィルタリング
const filteredPosts = response.contents.filter((post) =>
  post.category.some((h) => h.id === category),
);
---

<aside>
  <h2>関連記事</h2>
  <div class="swiper related-alider">
    <div class="related-list swiper-wrapper">
      {
        filteredPosts.map((content) => (
          <RelatedArticle
            id={content.id}
            title={content.title}
            thumbnail={content.thumbnail}
            category={content.category[0]}
            publishedAt={content.publishedAt}
          />
        ))
      }
    </div>
  </div>
</aside>

<style lang="scss">
  aside {
    flex: 1;
    @include media-sp {
      margin-top: vw(40);
    }
    h2 {
      @include media-pc {
        font-size: rem(30);
      }
      @include media-sp {
        font-size: vw(22);
      }
    }
    .related-list {
      display: flex;
      @include media-pc {
        flex-flow: column wrap;
        row-gap: rem(20);
        margin-top: rem(20);
      }
      @include media-sp {
        margin-top: vw(20);
      }
    }
  }
</style>

<script>
  import Swiper from "swiper";
  import "swiper/css/bundle";

  const mediaQuery = window.matchMedia("(min-width: 768px)");
  let relatedSwiper: any;

  function relatedSlider() {
    relatedSwiper = new Swiper("aside .related-alider", {
      slidesPerView: 1.8,
      speed: 400,
      spaceBetween: 20,
    });
  }

  function handleTabletChange(e: any) {
    if (!e.matches) {
      relatedSlider();
    } else {
      relatedSwiper.destroy(false, true);
    }
  }

  mediaQuery.addEventListener("change", handleTabletChange);
  handleTabletChange(mediaQuery);

  document.addEventListener("astro:page-load", () => {});
</script>
